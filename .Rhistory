choices = NULL,
multiple= FALSE))
),
fluidRow(
column(4,
offset = 6,
downloadButton("downloadGeneExpressionTable",
label="Download Gene Expression Table")),
column(2,
offset = 0,
actionButton("gene_update", label="Update"))
),
tags$hr(),
conditionalPanel(
condition = "input.gene_update > 0",
fluidRow(
tabsetPanel(type = "tabs",
tabPanel("Gene Expression Table", DT::dataTableOutput("gene_expression_table")),
tabPanel("Bar Chart",
plotlyOutput("gene_expression_barchart"),
tags$br(),
plotlyOutput("ncbi_gene_expression_barchart")),
tabPanel("Box Plot",
plotlyOutput("gene_expression_boxplot"),
tags$br(),
plotlyOutput("ncbi_gene_expression_boxplot", height='200%')),
tabPanel("String Database",
tags$h3("Gene Information: "),
DT::dataTableOutput("string"),
tags$br(),
tags$hr(),
tags$h3("Setting: "),
tags$div(id="string_setting", class="row",
tags$div(class="col col-sm-3",
selectInput("network_flavor", "Meaning of Network Edges", choices=c("confidence", "evidence", "actions"), selected = "actions", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("requried_score", "Minimum Required Interaction Score", choices=c("900", "700", "400", "150"), selected = "400", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("addInteractor1", "Max Number of Interactors to Show (1st shell)", choices=c("5", "10", "20", "50"), selected = "10", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("addInteractor2", "Max Number of Interactors to Show (2nd shell)", choices=c("0", "5", "10", "20", "50"), selected = "0", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL))
),
actionButton("updateString", 'Update'),
tags$div(id = "string_result", class="row",
tags$div(id="string_svg", class="col col-sm-8",
uiOutput("svg")),
tags$div(id="string_network", class="col col-sm-4",
htmlTemplate("network_data_table.html"),
tags$div(id="network_table", class="collapse",
dataTableOutput("string_network_table")))
),
tags$div(id="string_svg_legend", class="col col-sm-12",
htmlTemplate("legend.html"),
tags$br(),
tags$hr()
),
tags$div(id= "string_pathway",
tags$br(),
tags$h3("Functional Enrichment Results"),
DT::dataTableOutput("string_analysis"),
tags$div(id="string_analysis_tables",
uiOutput("string_func_dts"))
)
)
)
)
)
),
tabPanel("Pairwise Comparison",
tags$h1("Comparison Gene Table"),
tags$h3("Choose two conditions:"),
fluidRow(
column(3,
selectInput("condition1",
"Condition 1:",
c("All",
# unique(as.character(geneTable$comparison))
conditionTable$name[-1]
),
selected = "All")
),
column(3,
selectInput("condition2",
"Condition 2:",
c("All",
# unique(as.character(geneTable$comparison))
conditionTable$name[-(length(conditionTable$name))]
),
selected = "All")
),
column(3,
numericInput("fdr",
"FDR:",
value = 0.05,
min = 0.00,
max = 1.00,
step = 0.01)
),
column(3,
selectInput("protein_type",
"Protein Category:",
c("All",
"Secreted Proteins",
"Transporters",
"Transcription Factors",
"sGC pathway"),
selected = "All")
)
),
fluidRow(
column(4,
offset = 6,
downloadButton("downloadDiffGeneTable", label="Download Gene Table")),
column(2,
offset = 0,
actionButton("gene_diff_update", label="Update"))
),
tags$hr(),
conditionalPanel(
condition = "input.gene_diff_update > 0",
fluidRow(
DT::dataTableOutput("diff_gene_table")
),
br(),
fluidRow(
tags$h1("Volcano Plot"),
plotlyOutput("volcanoPlot")
)
)
)
)
)}
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('RNA_Seq/RNA_Seq/RNA_Seq_report/rna_seq_version4')
?order
?sort
a=(2,1,4,6,3)
a=c(2,1,4,6,3)
order(a)
a[order(a),]
a[order(a)]
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
runApp('Github/RNA_Seq_Report_App/rna_seq_home_page')
a= "asdfd  adsfds "
capabilities(a)
capitalize(a)
?seq_along()
a="sadf_sadf"
strsplit(a,"_")
system('python ./test.py 1 1)
")"
)
"
""
""
"
"
))))
fsa.dmklewajr
wajerpije;oi~
C
system("python ./test.py 1 1")
system("pwd")
getwd()
system("pwd > test.txt")
system("python test.py 1 2", wait=F)
?system
system("pwd", show.output.on.console = T)
system("python test.py 1 2", wait=F)
system("python test.py 1 2")
system("python C:\Users\xfan\Documents\Github\protein_expression_db\python_db\test.py 1 2")
system("python C://Users/xfan/Documents/Github/protein_expression_db/python_db/test.py 1 2")
system("python C://Users/xfan/Documents/Github/protein_expression_db/python_db/main.py 1 2")
system("python C://Users/xfan/Documents/Github/protein_expression_db/python_db/mainFun.py 1 2")
system("python C://Users/xfan/Documents/Github/protein_expression_db/python_db/mainFun.py 1 2")
system("python C://Users/xfan/Documents/Github/protein_expression_db/python_db/mainFun.py 1 2")
library("jsonlite", lib.loc="~/R/win-library/3.4")
?toJSON
jsoncars <- toJSON(mtcars, pretty=TRUE)
cat(jsoncars)
library("dplyr", lib.loc="~/R/win-library/3.4")
typeof(a)
a="werew"
typeof(a)
print(typeof(out))
a[1]
a
?bind_rows
one <- mtcars[1:4, ]
two <- mtcars[11:14, ]
# You can supply data frames as arguments:
bind_rows(one, two)
a = bind_rows(one, two)
a
b =toJSON(a)
b
gsub('"', '\"', b)
b
b[1]
a = bind_rows(one)
b =toJSON(a)
b
b[1]
return("1")
?Sys.Date
multiInput = paste0(var, '_input')
print(tmp)
if (var == 'date_input'){
tmp = as.Date(as.character(tmp), '%Y-%m-%d')
print(tmp)
return(tmp)
}
print(tmp)
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
?alert
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
install.packages(xlsx)
install.packages('xlsx')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
library(shiny)
library(shinythemes)
library(DT)
library(shinyjs)
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
library(shiny)
library(shinythemes)
library(DT)
library(shinyjs)
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
unlist(lapply(1:5, function(x) {h1("hello")}))
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
div(class="col-sm-4 card-background",
div(class="card-title-block",
div(class="card-title-1",
h5(class="card-title-species", "Card title"),
h5(class="card-title-cell", "Card Cell"))),
div(class="card-body-block",
div(class="card-body-content",
div(class="card-body-content-left",
div("Trx: sGC stimulator"),
div("Assay:")),
div(class="card-body-box-success",
div(class="card-body-box-value", "+++"))
)),
div (class="card-foot-block",
div(class="card-foot-content",
div(class="card-foot-content-left",
div("Source: In-house"),
div("ELN#: 000464-04")),
div(class="card-foot-content-right",
div(class="card-scientist", "Xueyi Fan"))
),
div(class="card-more",
a(href="#", class="card-link", "More Info"))
)
)
runApp('Github/protein_expression_db')
div(class=" card-background",
div(class="card-title-block",
div(class="card-title-1",
h5(class="card-title-species", "Card title"),
h5(class="card-title-cell", "Card Cell"))),
div(class="card-body-block",
div(class="card-body-content",
div(class="card-body-content-left",
div("Trx: sGC stimulator"),
div("Assay:")),
div(class="card-body-box-success",
div(class="card-body-box-value", "+++"))
)),
div (class="card-foot-block",
div(class="card-foot-content",
div(class="card-foot-content-left",
div("Source: In-house"),
div("ELN#: 000464-04")),
div(class="card-foot-content-right",
div(class="card-scientist", "Xueyi Fan"))
),
div(class="card-more",
a(href="#", class="card-link", "More Info"))
)
)
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
getSelectedExperiemnt <- function(input, experiment, species, cell, signal_strength)
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
div(class=" card-background",
div(class="card-title-block",
div(class="card-title-1",
h5(class="card-title-species", row[9]),
h5(class="card-title-cell", row[7]))),
div(class="card-body-block",
div(class="card-body-content",
div(class="card-body-content-left",
div(paste0("Trx: ", row[11])),
div(paste0("Assay: ", row[13]))),
if(row[14] == "-"){
div(class="card-body-box-fail",
div(class="card-body-box-value", row[14]))
}else{
div(class="card-body-box-success",
div(class="card-body-box-value", row[14]))}
)),
div (class="card-foot-block",
div(class="card-foot-content",
div(class="card-foot-content-left",
div(paste0("Source: ", row[2])),
div(paste0("ELN#: ", row[19]))),
div(class="card-foot-content-right",
div(class="card-scientist", row[20]))
),
div(class="card-more",
a(href="#", class="card-link", "More Info"))
)
)
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
?tags$scripts
?tags$script
script
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('C:/Users/xfan/AppData/Local/Temp/Temp1_jquerydemo.zip')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
p(tags$strong(paste0(x, ": ")),row[x])
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
?iconv
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
?dbpool
library(pool)
?dbPool
?head
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
signal_strength_select = signal_strength[,2][!signal_strength[,2] == "-"]
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('C:/Users/xfan/AppData/Local/Temp/XFan_MobaXterm6.4/RemoteFiles6/3')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
print(experiment[experiment$Assay %in% assay_selected,])
filter = (experiment$Species %in% species_select) &
(experiment$Cell %in% cell_select) &
(experiment$SignalStrength %in% signal_strength_select)&
(experiment$Franchise %in% franchise_selected)&
(experiment$Organ %in% organ_selected)&
(experiment$CellType %in% cell_type_selected)&
(experiment$AssayType %in% assay_type_selected)&
(experiment$Assay %in% assay_selected)&
(experiment$Scientist %in% scientist_selected)
runApp('Github/protein_expression_db')
print(experiment_selected)
runApp('Github/protein_expression_db')
filter = (experiment$Species %in% species_select) &
(experiment$Cell %in% cell_select) &
(experiment$SignalStrength %in% signal_strength_select)&
(experiment$Franchise %in% franchise_selected)&
(experiment$Organ %in% organ_selected)&
(experiment$CellType %in% cell_type_selected)&
(experiment$AssayType %in% assay_type_selected || is.null(experiment$AssayType))&
(experiment$Assay %in% assay_selected || is.null(experiment$Assay))&
(experiment$Scientist %in% scientist_selected)
runApp('Github/protein_expression_db')
filter = (experiment$Species %in% species_select) &
(experiment$Cell %in% cell_select) &
(experiment$SignalStrength %in% signal_strength_select)&
(experiment$Franchise %in% franchise_selected)&
(experiment$Organ %in% organ_selected)&
(experiment$CellType %in% cell_type_selected)&
(experiment$AssayType %in% assay_type_selected || is.na(experiment$AssayType))&
(experiment$Assay %in% assay_selected || is.na(experiment$Assay))&
(experiment$Scientist %in% scientist_selected)
runApp('Github/protein_expression_db')
print(is.na(experiment$AssayType))
runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
shiny::runApp('Github/protein_expression_db')
runApp('Github/protein_expression_db')
if (is.null(input[[name]])|| input[[name]] == ""){
data = table[,2]
} else{
data = input[[name]]
}
runApp('Github/protein_expression_db')
